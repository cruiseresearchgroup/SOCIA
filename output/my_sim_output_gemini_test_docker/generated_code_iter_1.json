{
  "code": "# main.py\n\nimport random\nimport sys\nimport os\nfrom datetime import datetime\n\n# Add the current directory to the path to allow importing other modules\nsys.path.append(os.path.dirname(__file__))\n\nfrom config import SIMULATION_PARAMETERS\nfrom simulation import Simulation\nfrom utils import plot_results, save_results_to_csv\n\ndef main():\n    \"\"\"\n    Main function to set up and run the SIR simulation.\n    \"\"\"\n    print(\"Starting Simple Epidemic Simulation (SIR Model)\")\n\n    # Load parameters\n    params = SIMULATION_PARAMETERS\n    population_size = params[\"population_size\"]\n    initial_infected_count = params[\"initial_infected_count\"]\n    simulation_duration_steps = params[\"simulation_duration_steps\"]\n    random_seed = params[\"random_seed\"]\n\n    # --- Parameter Validation ---\n    if population_size <= 0:\n        print(\"Error: Population size must be positive.\")\n        sys.exit(1)\n    if initial_infected_count < 0 or initial_infected_count > population_size:\n        print(f\"Error: Initial infected count ({initial_infected_count}) must be between 0 and population size ({population_size}).\")\n        sys.exit(1)\n    if simulation_duration_steps <= 0:\n        print(\"Error: Simulation duration must be positive.\")\n        sys.exit(1)\n    for param, value in params.items():\n         if isinstance(value, (int, float)) and value < 0 and param not in [\"random_seed\"]:\n             print(f\"Warning: Parameter '{param}' is negative ({value}). Ensure this is intended.\")\n\n    # Set random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n        print(f\"Using specified random seed: {random_seed}\")\n    else:\n        # Use current time if no seed is specified\n        seed = int(datetime.now().timestamp())\n        random.seed(seed)\n        print(f\"Using random seed from current time: {seed}\")\n\n    # Create and run the simulation\n    print(f\"Initializing simulation with {population_size} individuals, {initial_infected_count} initially infected.\")\n    simulation = Simulation(params)\n    simulation.run()\n\n    print(\"Simulation finished.\")\n\n    # Get results\n    metrics = simulation.get_metrics()\n\n    # --- Data Analysis and Output ---\n    output_dir = \"simulation_results\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Plot results\n    plot_filename = os.path.join(output_dir, \"sir_simulation_plot.png\")\n    print(f\"Saving plot to {plot_filename}\")\n    try:\n        plot_results(metrics, plot_filename)\n        print(\"Plot saved successfully.\")\n    except Exception as e:\n        print(f\"Error saving plot: {e}\")\n\n    # Save results to CSV\n    csv_filename = os.path.join(output_dir, \"sir_simulation_data.csv\")\n    print(f\"Saving data to {csv_filename}\")\n    try:\n        save_results_to_csv(metrics, csv_filename)\n        print(\"Data saved successfully.\")\n    except Exception as e:\n        print(f\"Error saving data to CSV: {e}\")\n\n    # Basic validation checks (optional, but good practice)\n    print(\"\\n--- Validation Checks ---\")\n    last_step_metrics = {key: values[-1] if isinstance(values, list) and values else None\n                         for key, values in metrics.items() if key != 'time_step'}\n    last_step_metrics['time_step'] = metrics['time_step'][-1] if metrics['time_step'] else 0\n\n    # Population Conservation Check\n    if last_step_metrics['susceptible_count'] is not None and \\\n       last_step_metrics['infected_count'] is not None and \\\n       last_step_metrics['recovered_count'] is not None:\n        total_population_at_end = last_step_metrics['susceptible_count'] + \\\n                                  last_step_metrics['infected_count'] + \\\n                                  last_step_metrics['recovered_count']\n        if total_population_at_end == population_size:\n            print(f\"Validation: Population Conservation PASSED (Total at end: {total_population_at_end})\")\n        else:\n            print(f\"Validation: Population Conservation FAILED (Total at end: {total_population_at_end}, Expected: {population_size})\")\n    else:\n         print(\"Validation: Population Conservation check skipped due to missing metric data.\")\n\n\n    # Epidemic Curve Shape Check (basic)\n    infected_counts = metrics.get('infected_count', [])\n    if infected_counts:\n        # Check if infected count ever rose above initial and then fell\n        initial_infected = infected_counts[0] if infected_counts else 0\n        peak_infected = max(infected_counts) if infected_counts else 0\n        final_infected = infected_counts[-1] if infected_counts else 0\n\n        if peak_infected > initial_infected and final_infected <= initial_infected:\n             print(\"Validation: Epidemic Curve Shape (basic) PASSED (Infected count rose and fell)\")\n        elif peak_infected == initial_infected and initial_infected > 0 and final_infected == initial_infected:\n             print(\"Validation: Epidemic Curve Shape (basic) - Possible endemic or no spread (Infected count stayed constant)\")\n        elif peak_infected == initial_infected and initial_infected > 0 and final_infected < initial_infected:\n             print(\"Validation: Epidemic Curve Shape (basic) - Possible outbreak died out quickly (Infected count only fell)\")\n        elif peak_infected > initial_infected and final_infected > initial_infected:\n             print(\"Validation: Epidemic Curve Shape (basic) - Possible ongoing outbreak or plateaued (Infected count rose and stayed high)\")\n        else:\n             print(\"Validation: Epidemic Curve Shape (basic) - No significant change in infected count.\")\n    else:\n        print(\"Validation: Epidemic Curve Shape check skipped due to missing infected count data.\")\n\n    # Final State Plausibility Check (basic)\n    if last_step_metrics['infected_count'] is not None:\n        if last_step_metrics['infected_count'] <= initial_infected_count and last_step_metrics['infected_count'] < population_size * 0.01: # Consider near zero\n             print(f\"Validation: Final State Plausibility (basic) PASSED (Infected count at end is low: {last_step_metrics['infected_count']})\")\n        else:\n             print(f\"Validation: Final State Plausibility (basic) FAILED (Infected count at end is high: {last_step_metrics['infected_count']})\")\n    else:\n         print(\"Validation: Final State Plausibility check skipped due to missing infected count data.\")\n\n    print(\"--- End of Validation Checks ---\")\n    print(\"Simulation finished successfully.\")\n\n\nif __name__ == \"__main__\":\n    main()",
  "code_summary": "Generated 140 lines of code containing 0 classes and 1 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person"
    ],
    "behaviors": [
      "interact_with_others",
      "change_health_status"
    ]
  }
}