{
  "model_type": "agent_based",
  "description": "Simulates epidemic spread using a simple SIR model where individual agents (people) interact and change health states.",
  "entities": [
    {
      "name": "Person",
      "attributes": [
        "health_status"
      ],
      "behaviors": [
        "interact_with_others",
        "change_health_status"
      ],
      "initialization": {
        "method": "specified",
        "parameters": {
          "initial_health_distribution": {
            "Susceptible": "population_size - initial_infected_count",
            "Infected": "initial_infected_count",
            "Recovered": 0
          }
        }
      }
    }
  ],
  "behaviors": [
    {
      "name": "interact_with_others",
      "description": "Each person interacts with a specified number of other randomly selected people in the population.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "interactions_per_person_per_time_step": "value from parameters"
      },
      "algorithm": "For each agent, randomly select 'interactions_per_person_per_time_step' distinct partners from the entire population. For each interaction pair, if one is Susceptible and the other is Infected, trigger the 'Infection_Transmission' interaction."
    },
    {
      "name": "change_health_status",
      "description": "Each person updates their health status based on interactions (potential infection) and recovery rules.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "recovery_probability_per_time_step": "value from parameters"
      },
      "algorithm": "At the end of a time step, process any pending state changes (e.g., S -> I due to infection). For agents currently in the Infected state, apply the 'recovery_probability_per_time_step' to potentially transition them to the Recovered state. Ensure transitions only occur according to SIR rules (S->I, I->R)."
    }
  ],
  "interactions": [
    {
      "name": "Infection_Transmission",
      "description": "When a Susceptible person interacts with an Infected person, the Susceptible person has a probability of becoming Infected.",
      "entities_involved": [
        "Person",
        "Person"
      ],
      "trigger": "interaction between a Susceptible and an Infected person",
      "effect": "The Susceptible person is marked for transition to the 'Infected' state with a probability equal to 'infection_probability_per_interaction'. State changes are typically applied simultaneously at the end of the time step."
    }
  ],
  "environment": {
    "type": "non_spatial",
    "dimensions": null,
    "time_step": 1,
    "time_unit": "discrete step"
  },
  "parameters": {
    "population_size": 1000,
    "initial_infected_count": 1,
    "infection_probability_per_interaction": 0.05,
    "recovery_probability_per_time_step": 0.1,
    "interactions_per_person_per_time_step": 5,
    "simulation_duration_steps": 200,
    "random_seed": null
  },
  "initialization": {
    "population_size": "value from parameters",
    "initial_infected_count": "value from parameters",
    "random_seed": "value from parameters (use system time if null)",
    "procedure": "Create 'population_size' Person agents. Assign 'health_status' based on the initial distribution: 'initial_infected_count' agents are 'Infected', the rest are 'Susceptible'. Assign a unique ID to each agent."
  },
  "algorithms": {
    "simulation_loop": "Iterate for 'simulation_duration_steps'. In each step: 1. Create a list of potential state changes (e.g., S->I infections, I->R recoveries). 2. For each agent, execute the 'interact_with_others' behavior, populating the list of potential S->I changes. 3. For each agent, determine potential I->R changes based on 'recovery_probability_per_time_step'. 4. Apply all collected state changes simultaneously. 5. Record metrics (S, I, R counts, total cases).",
    "infection_check": "When an S agent interacts with an I agent, generate a random number between 0 and 1. If it is less than 'infection_probability_per_interaction', the S agent is marked to become Infected."
  },
  "data_sources": [],
  "code_structure": {
    "files": [
      {
        "name": "main.py",
        "description": "Entry point. Handles parameter loading, initialization, running the simulation loop, collecting metrics, and potentially plotting/saving results."
      },
      {
        "name": "agent.py",
        "description": "Defines the Person class with attributes (health_status) and methods corresponding to behaviors (interact, step, change_status)."
      },
      {
        "name": "environment.py",
        "description": "Defines the simulation environment, including the list of agents and methods for agent lookup/interaction (in this non-spatial case, acts like a population manager)."
      },
      {
        "name": "config.py",
        "description": "Stores simulation parameters and configuration."
      }
    ],
    "dependencies": [
      "random",
      "collections",
      "matplotlib (optional, for plotting)",
      "numpy (optional, for array operations or random number generation)"
    ]
  }
}