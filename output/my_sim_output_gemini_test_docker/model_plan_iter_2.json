{
  "model_type": "agent_based",
  "description": "Models the spread of a virus in a population where individuals transition between Susceptible, Infected, and Recovered states based on interactions and time.",
  "entities": [
    {
      "name": "Person",
      "attributes": [
        "id",
        "health_status",
        "days_infected"
      ],
      "behaviors": [
        "update_status"
      ],
      "initialization": {
        "method": "specified_distribution",
        "parameters": {
          "initial_infected_count": "parameter:initial_infected_count",
          "initial_status_distribution": {
            "Susceptible": "population_size - initial_infected_count",
            "Infected": "initial_infected_count",
            "Recovered": 0
          },
          "initial_days_infected": 0
        }
      }
    }
  ],
  "behaviors": [
    {
      "name": "update_status",
      "description": "Updates the health status of a person based on rules, primarily handling the transition from Infected to Recovered.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "mean_infectious_duration": "parameter:mean_infectious_duration"
      },
      "algorithm": "If health_status is 'Infected', increment days_infected. If days_infected exceeds mean_infectious_duration, transition health_status to 'Recovered'."
    }
  ],
  "interactions": [
    {
      "name": "contact",
      "description": "An interaction between two people that can result in virus transmission.",
      "entities_involved": [
        "Person",
        "Person"
      ],
      "trigger": "random_pairing_per_step",
      "effect": "If one person is 'Infected' and the other is 'Susceptible', the Susceptible person becomes 'Infected' with probability 'infection_probability_per_contact'."
    }
  ],
  "environment": {
    "type": "non_spatial",
    "dimensions": null,
    "time_step": 1,
    "time_unit": "days"
  },
  "parameters": {
    "population_size": 1000,
    "initial_infected_count": 5,
    "infection_probability_per_contact": 0.05,
    "mean_infectious_duration": 10,
    "contacts_per_person_per_step": 5,
    "simulation_steps": 200,
    "random_seed": null
  },
  "initialization": {
    "population_size": "parameter:population_size",
    "initial_infected_count": "parameter:initial_infected_count",
    "random_seed": "parameter:random_seed",
    "procedure": "Create 'population_size' Person agents. Randomly assign 'initial_infected_count' agents to 'Infected' status, setting their 'days_infected' to 0. Assign the remaining agents to 'Susceptible' status, setting 'days_infected' to 0. Assign unique IDs."
  },
  "algorithms": {
    "simulation_loop": "Iterate from step 1 to 'simulation_steps'. In each step: 1. For each Person agent, simulate 'contacts_per_person_per_step' interactions by randomly selecting another Person agent. 2. For each simulated contact, apply the 'contact' interaction logic. 3. After all contacts are processed for the current step, iterate through all Person agents and apply the 'update_status' behavior. 4. Collect metrics for the current step.",
    "contact_interaction_logic": "Given two agents, agent_A and agent_B: If agent_A is 'Infected' and agent_B is 'Susceptible', generate a random number between 0 and 1. If this number is less than 'infection_probability_per_contact', change agent_B's health_status to 'Infected' and set days_infected to 0. Repeat the check with roles reversed (agent_B Infected, agent_A Susceptible)."
  },
  "data_sources": [],
  "code_structure": {
    "files": [
      {
        "name": "simulation.py",
        "description": "Main script containing the simulation loop, initialization, parameter loading, and data collection."
      },
      {
        "name": "person.py",
        "description": "Defines the Person agent class with its attributes and the 'update_status' method."
      },
      {
        "name": "interaction.py",
        "description": "Contains functions or methods for handling interactions, specifically the 'contact' logic."
      },
      {
        "name": "metrics.py",
        "description": "Contains functions for calculating and storing simulation metrics at each step."
      },
      {
        "name": "utils.py",
        "description": "Helper functions (e.g., random number generation with seed, data saving)."
      }
    ],
    "dependencies": [
      "random",
      "numpy",
      "pandas",
      "matplotlib"
    ]
  }
}