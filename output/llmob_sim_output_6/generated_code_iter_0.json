{
  "code": "import os\nimport json\nimport random\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Any, Optional\nfrom geopy.distance import geodesic\nimport numpy as np\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Path setup\nPROJECT_ROOT = os.environ.get(\"PROJECT_ROOT\", \".\")\nDATA_PATH = os.environ.get(\"DATA_PATH\", \"data_fitting/llmob_data/\")\nDATA_DIR = os.path.join(PROJECT_ROOT, DATA_PATH)\n\n# Load data files\ndef load_json(file_name: str) -> Any:\n    \"\"\"Load a JSON file from the data directory.\"\"\"\n    try:\n        with open(os.path.join(DATA_DIR, file_name), 'r') as file:\n            return json.load(file)\n    except (FileNotFoundError, IOError) as e:\n        logging.error(f\"Error loading {file_name}: {e}\")\n        return {}\n\n# Entity: Resident\nclass Resident:\n    \"\"\"Represents an urban resident with attributes and behaviors.\"\"\"\n    \n    def __init__(self, resident_id: str, attributes: Dict[str, Any], daily_activities: List[str]):\n        self.resident_id = resident_id\n        self.age = attributes.get(\"age\")\n        self.gender = attributes.get(\"gender\")\n        self.occupation = attributes.get(\"occupation\")\n        self.home_location = attributes.get(\"home_location\")\n        self.work_location = attributes.get(\"work_location\")\n        self.daily_schedule = daily_activities\n        self.current_location = self.home_location\n\n    def commute(self, time: datetime):\n        \"\"\"Simulate commuting behavior for the resident.\"\"\"\n        if self.current_location == self.home_location:\n            self.current_location = self.work_location\n        else:\n            self.current_location = self.home_location\n\n    def participate_in_activity(self, motivation: str, current_time: datetime):\n        \"\"\"Simulate activity participation based on daily schedule.\"\"\"\n        activities = {\n            \"shopping\": self.shop,\n            \"exercising\": self.exercise,\n            \"socializing\": self.socialize,\n            \"working\": self.work,\n            \"resting\": self.rest\n        }\n        activity = activities.get(motivation)\n        if activity:\n            activity(current_time)\n\n    def shop(self, current_time: datetime):\n        \"\"\"Simulate shopping activity.\"\"\"\n        # Example: Update resident state or interact with locations\n        logging.info(f\"{self.resident_id} is shopping at {self.current_location}.\")\n\n    def exercise(self, current_time: datetime):\n        \"\"\"Simulate exercising activity.\"\"\"\n        # Example: Update resident state or interact with locations\n        logging.info(f\"{self.resident_id} is exercising at {self.current_location}.\")\n\n    def socialize(self, current_time: datetime):\n        \"\"\"Simulate socializing activity.\"\"\"\n        # Example: Update resident state or interact with locations\n        logging.info(f\"{self.resident_id} is socializing at {self.current_location}.\")\n\n    def work(self, current_time: datetime):\n        \"\"\"Simulate working activity.\"\"\"\n        # Example: Update resident state or interact with locations\n        logging.info(f\"{self.resident_id} is working at {self.current_location}.\")\n\n    def rest(self, current_time: datetime):\n        \"\"\"Simulate resting activity.\"\"\"\n        # Example: Update resident state or interact with locations\n        logging.info(f\"{self.resident_id} is resting at {self.current_location}.\")\n\n# Entity: Location\nclass Location:\n    \"\"\"Represents a location with attributes and behaviors.\"\"\"\n\n    def __init__(self, location_type: str, address: str, capacity: int, operating_hours: str):\n        self.type = location_type\n        self.address = address\n        self.capacity = capacity\n        self.operating_hours = operating_hours\n        self.current_occupancy = 0\n\n    def host_activity(self) -> bool:\n        \"\"\"Host an activity at the location.\"\"\"\n        if self.current_occupancy < self.capacity:\n            self.current_occupancy += 1\n            return True\n        return False\n\n# Simulation Environment\nclass SimulationEnvironment:\n    \"\"\"Manages the simulation environment and timing.\"\"\"\n\n    def __init__(self, duration_days: int, time_step: int):\n        self.current_time = datetime.now()\n        self.end_time = self.current_time + timedelta(days=duration_days)\n        self.time_step = timedelta(minutes=time_step)\n\n    def advance_time(self):\n        \"\"\"Advance simulation time by one time step.\"\"\"\n        self.current_time += self.time_step\n\n# Simulation Class\nclass UrbanSimulation:\n    \"\"\"Main class to coordinate the urban simulation.\"\"\"\n\n    def __init__(self, population_size: int, simulation_duration_days: int):\n        self.population_size = population_size\n        self.simulation_duration_days = simulation_duration_days\n        self.residents = []\n        self.locations = []\n        self.environment = SimulationEnvironment(simulation_duration_days, 60)\n\n    def load_data(self):\n        \"\"\"Load and initialize data for the simulation.\"\"\"\n        resident_data = load_json(\"2019Y.json\")\n        poi_data = load_json(\"poi_category_192021_longitude_latitude_complement_alignment_clean.json\")\n        category_data = load_json(\"catto.json\")\n        \n        # Initialize residents\n        for resident_id, activities in resident_data.items():\n            attributes = {\n                \"age\": random.randint(18, 65),\n                \"gender\": random.choice([\"male\", \"female\"]),\n                \"occupation\": random.choice([\"worker\", \"student\"]),\n                \"home_location\": random.choice(list(poi_data.keys())),\n                \"work_location\": random.choice(list(poi_data.keys()))\n            }\n            self.residents.append(Resident(resident_id, attributes, activities))\n        \n        # Initialize locations\n        for location_type, details in category_data.items():\n            for poi in poi_data.get(location_type, []):\n                self.locations.append(Location(location_type, poi[2], random.randint(10, 100), \"09:00-18:00\"))\n\n    def run(self):\n        \"\"\"Run the simulation.\"\"\"\n        while self.environment.current_time < self.environment.end_time:\n            for resident in self.residents:\n                resident.commute(self.environment.current_time)\n                motivation = self.generate_motivation(resident)\n                resident.participate_in_activity(motivation, self.environment.current_time)\n            self.environment.advance_time()\n\n    def evaluate(self):\n        \"\"\"Evaluate the simulation using specified metrics.\"\"\"\n        # Implement evaluation logic using metrics like Step distance, Step interval, and Jensen-Shannon divergence\n        logging.info(\"Evaluating simulation...\")\n\n    def visualize(self):\n        \"\"\"Visualize the simulation results.\"\"\"\n        # Implement visualization logic\n        logging.info(\"Visualizing results...\")\n\n    def save_results(self, filename: str):\n        \"\"\"Save the simulation results to a file.\"\"\"\n        # Implement logic to save results\n        logging.info(f\"Results saved to {filename}\")\n\n    def generate_motivation(self, resident: Resident) -> str:\n        \"\"\"Generate a daily motivation for the resident.\"\"\"\n        # Implement logic to generate motivation based on resident data\n        return random.choice([\"shopping\", \"exercising\", \"socializing\", \"working\", \"resting\"])\n\ndef main():\n    \"\"\"Entry point for the simulation.\"\"\"\n    simulation = UrbanSimulation(population_size=1000, simulation_duration_days=30)\n    simulation.load_data()\n    simulation.run()\n    simulation.evaluate()\n    simulation.visualize()\n    simulation.save_results(\"results.csv\")\n\n# Execute main\nmain()",
  "code_summary": "Generated 190 lines of code containing 4 classes and 21 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Resident",
      "Location"
    ],
    "behaviors": [
      "commute",
      "participate_in_activity"
    ]
  }
}