{
  "code": "import os\nimport json\nimport random\nimport logging\nimport pandas as pd\nimport openai\nfrom sklearn.metrics import mean_absolute_error\nimport numpy as np\nimport openai.error\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Configure paths\nPROJECT_ROOT = os.environ.get(\"PROJECT_ROOT\", \".\")\nDATA_PATH = os.environ.get(\"DATA_PATH\", \"data_fitting/agent_society/\")\nDATA_DIR = os.path.join(PROJECT_ROOT, DATA_PATH)\n\n# Load OpenAI API key\ntry:\n    from keys import OPENAI_API_KEY\n    openai.api_key = OPENAI_API_KEY\nexcept ImportError as e:\n    logging.error(\"Failed to load OPENAI_API_KEY from keys.py. Please ensure the file exists and is correctly set up.\")\n    raise e\n\n# Load data files\ndef load_json_file(filename: str) -> dict:\n    \"\"\"Load data from a JSON file.\"\"\"\n    file_path = os.path.join(DATA_DIR, filename)\n    try:\n        with open(file_path, 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        logging.error(f\"The file {filename} was not found in {DATA_DIR}.\")\n        raise\n    except json.JSONDecodeError:\n        logging.error(f\"The file {filename} contains malformed JSON.\")\n        raise\n    except IOError:\n        logging.error(f\"An error occurred while reading the file {filename}.\")\n        raise\n\n# Load data\ntry:\n    user_data = load_json_file('user_sample.json')\n    item_data = load_json_file('item_sample.json')\n    review_data = load_json_file('review_sample.json')\n    amazon_data = load_json_file('amazon_train_sample.json')\n    goodreads_data = load_json_file('goodreads_train_sample.json')\n    yelp_data = load_json_file('yelp_train_sample.json')\nexcept Exception as e:\n    logging.error(f\"Error loading data files: {e}\")\n    raise\n\n# User class\nclass User:\n    def __init__(self, user_id: str, preferences: dict, review_history: list, rating_tendency: float):\n        self.id = user_id\n        self.preferences = preferences\n        self.review_history = review_history\n        self.rating_tendency = rating_tendency\n\n    def write_review(self, product: 'Product') -> tuple:\n        \"\"\"Simulates writing a review for a product.\"\"\"\n        review_text = self.generate_review_text(product)\n        rating = self.rate_product(product)\n        self.review_history.append((product.id, rating, review_text))\n        return rating, review_text\n\n    def generate_review_text(self, product: 'Product') -> str:\n        \"\"\"Generate review text using OpenAI's API.\"\"\"\n        try:\n            response = openai.Completion.create(\n                model=\"text-davinci-003\",\n                prompt=f\"Write a review for the product {product.id} in category {product.category}.\",\n                max_tokens=100\n            )\n            review_text = response['choices'][0]['text'].strip()\n        except openai.error.OpenAIError as e:\n            logging.error(f\"Error generating review text: {e}\")\n            review_text = \"Error generating review text.\"\n        return review_text\n\n    def rate_product(self, product: 'Product') -> int:\n        \"\"\"Rate the product based on user preferences.\"\"\"\n        base_rating = random.randint(1, 5)\n        if product.category in self.preferences:\n            base_rating += int(self.preferences[product.category] * 0.5)\n        return max(1, min(5, base_rating))\n\n# Product class\nclass Product:\n    def __init__(self, item_id: str, category: str, average_rating: float, review_count: int):\n        self.id = item_id\n        self.category = category\n        self.average_rating = average_rating\n        self.review_count = review_count\n\n    def receive_review(self, rating: int) -> None:\n        \"\"\"Process an incoming review by updating the review count and average rating.\"\"\"\n        self.review_count += 1\n        self.average_rating = ((self.average_rating * (self.review_count - 1)) + rating) / self.review_count\n\n# Planning Agent\nclass PlanningAgent:\n    def create_plan(self, user_id: str, item_id: str) -> dict:\n        \"\"\"Create a plan for the user to write a review for an item.\"\"\"\n        return {\"user_id\": user_id, \"item_id\": item_id, \"action\": \"write_review\"}\n\n# Memory Agent\nclass MemoryAgent:\n    def __init__(self, user_data: dict, item_data: dict):\n        self.user_data = {user['user_id']: user for user in user_data}\n        self.item_data = {item['item_id']: item for item in item_data}\n\n    def retrieve_user_info(self, user_id: str) -> dict:\n        \"\"\"Retrieve user information based on user ID.\"\"\"\n        user_info = self.user_data.get(user_id)\n        if not user_info:\n            logging.warning(f\"User {user_id} not found.\")\n        return user_info\n\n    def retrieve_item_info(self, item_id: str) -> dict:\n        \"\"\"Retrieve item information based on item ID.\"\"\"\n        item_info = self.item_data.get(item_id)\n        if not item_info:\n            logging.warning(f\"Item {item_id} not found.\")\n        return item_info\n\n# Reasoning Agent\nclass ReasoningAgent:\n    def simulate_review(self, user: User, product: Product) -> tuple:\n        \"\"\"Simulate a review process by a user for a product.\"\"\"\n        return user.write_review(product)\n\n# Simulation class\nclass Simulation:\n    def __init__(self, users: list, products: list, user_data: dict, item_data: dict):\n        self.users = users\n        self.products = products\n        self.planning_agent = PlanningAgent()\n        self.memory_agent = MemoryAgent(user_data, item_data)\n        self.reasoning_agent = ReasoningAgent()\n\n    def run(self, days: int = 30) -> None:\n        \"\"\"Run the simulation for a given number of days.\"\"\"\n        for day in range(days):\n            products_for_review = np.random.choice(self.products, max(1, int(0.1 * len(self.products))), replace=False)\n            for user in self.users:\n                if random.random() < 0.1:\n                    product = random.choice(products_for_review)\n                    plan = self.planning_agent.create_plan(user.id, product.id)\n                    user_info = self.memory_agent.retrieve_user_info(plan['user_id'])\n                    item_info = self.memory_agent.retrieve_item_info(plan['item_id'])\n                    if user_info and item_info:\n                        rating, review = self.reasoning_agent.simulate_review(user, product)\n                        product.receive_review(rating)\n\n    def evaluate(self) -> None:\n        \"\"\"Evaluate the results of the simulation.\"\"\"\n        total_review_count = sum([product.review_count for product in self.products])\n        if total_review_count > 0:\n            total_rating_sum = sum([product.average_rating * product.review_count for product in self.products])\n            average_rating = total_rating_sum / total_review_count\n            logging.info(f\"Average rating across all products: {average_rating}\")\n        else:\n            logging.info(\"No reviews available for evaluation.\")\n\n    def visualize(self) -> None:\n        \"\"\"Visualize the results of the simulation.\"\"\"\n        # Placeholder for visualization logic.\n        logging.info(\"Visualization logic is not yet implemented.\")\n\n    def save_results(self, filename: str) -> None:\n        \"\"\"Save the results of the simulation to a CSV file.\"\"\"\n        results = {\"users\": [user.id for user in self.users],\n                   \"products\": [product.id for product in self.products]}\n        df = pd.DataFrame(results)\n        df.to_csv(filename, index=False)\n\ndef main() -> None:\n    if not user_data or not item_data:\n        logging.error(\"User data or item data not loaded. Exiting.\")\n        return\n\n    users = [User(user['user_id'], user.get('preferences', {}), [], user.get('average_stars', 0)) for user in user_data]\n    products = [Product(item['item_id'], item.get('category', ''), item['stars'], item['review_count']) for item in item_data]\n\n    simulation = Simulation(users, products, user_data, item_data)\n    simulation.run()\n    simulation.evaluate()\n    simulation.visualize()\n    simulation.save_results(\"results.csv\")\n\n\n# Execute main for both direct execution and sandbox wrapper invocation\nmain()",
  "code_summary": "Generated 198 lines of code containing 6 classes and 18 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "User",
      "Product"
    ],
    "behaviors": [
      "write_review",
      "rate_product",
      "receive_review"
    ]
  }
}