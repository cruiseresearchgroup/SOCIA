{
  "model_type": "agent_based",
  "description": "An agent-based model simulating the spread of a simple virus in a closed population. Individuals (agents) have health states (Susceptible, Infected, Recovered) and interact based on a contact rate, with a probability of transmission during interactions between Infected and Susceptible individuals. Infected individuals recover after a fixed duration.",
  "entities": [
    {
      "name": "Person",
      "attributes": [
        "health_state",
        "infection_start_step"
      ],
      "behaviors": [
        "interact_with_others",
        "transition_state_based_on_rules"
      ],
      "initialization": {
        "method": "specified_counts",
        "parameters": {
          "initial_susceptible_count": "population_size - initial_infected_count",
          "initial_infected_count": "initial_infected_count",
          "initial_recovered_count": 0
        }
      }
    }
  ],
  "behaviors": [
    {
      "name": "interact_with_others",
      "description": "An agent attempts to make contacts with other agents in the environment.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "contact_rate_per_person_per_step": "Value from global parameters"
      },
      "algorithm": "For each agent, repeat 'contact_rate_per_person_per_step' times: Randomly select another agent from the population (excluding self). Trigger the 'potential_infection_contact' interaction between self and the selected agent."
    },
    {
      "name": "transition_state_based_on_rules",
      "description": "An agent updates its health state based on current state, interactions, and time.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "infection_duration_steps": "Value from global parameters"
      },
      "algorithm": "If agent's state is Susceptible: If infected during an interaction in this step, change state to Infected and record the current simulation step as 'infection_start_step'. If agent's state is Infected: Check if current step - 'infection_start_step' >= 'infection_duration_steps'. If true, change state to Recovered. If agent's state is Recovered: Remain in Recovered state."
    }
  ],
  "interactions": [
    {
      "name": "potential_infection_contact",
      "description": "An interaction between two individuals where transmission may occur.",
      "entities_involved": [
        "Person",
        "Person"
      ],
      "trigger": "Occurs when the 'interact_with_others' behavior selects another agent.",
      "effect": "If one agent is Infected and the other is Susceptible: With probability 'transmission_probability', the Susceptible agent becomes Infected. This state change is typically queued or handled within the Susceptible agent's 'transition_state_based_on_rules' behavior in the same step or the next."
    }
  ],
  "environment": {
    "type": "abstract/well-mixed",
    "dimensions": null,
    "time_step": 1,
    "time_unit": "simulation step"
  },
  "parameters": {
    "population_size": {
      "type": "integer",
      "description": "Total number of individuals in the simulation.",
      "default": 1000
    },
    "initial_infected_count": {
      "type": "integer",
      "description": "Number of individuals initially in the Infected state. Must be < population_size.",
      "default": 1
    },
    "transmission_probability": {
      "type": "float",
      "description": "The probability that infection occurs during a single contact between an Infected and a Susceptible individual.",
      "default": 0.05,
      "range": [
        0.0,
        1.0
      ]
    },
    "infection_duration_steps": {
      "type": "integer",
      "description": "The number of simulation steps an individual remains in the Infected state before recovering.",
      "default": 10
    },
    "contact_rate_per_person_per_step": {
      "type": "float",
      "description": "The average number of contacts each person makes with others per simulation step.",
      "default": 5.0
    },
    "simulation_steps": {
      "type": "integer",
      "description": "Total number of steps the simulation will run.",
      "default": 100
    },
    "random_seed": {
      "type": "integer",
      "description": "Seed for the random number generator to ensure reproducibility.",
      "default": null
    }
  },
  "initialization": {
    "population_size": "parameter: population_size",
    "initial_infected_count": "parameter: initial_infected_count",
    "random_seed": "parameter: random_seed",
    "agent_initial_states": "Create 'population_size' agents. Assign 'initial_infected_count' agents to 'Infected' state, setting 'infection_start_step' to 0. Assign remaining agents to 'Susceptible' state."
  },
  "algorithms": {
    "agent_selection_for_contact": "Random sampling with replacement from the list of all agents, excluding the agent initiating the contact.",
    "transmission_check": "Compare a randomly generated float between 0.0 and 1.0 with the 'transmission_probability'. If the random number is less than 'transmission_probability', transmission occurs.",
    "recovery_check": "Compare current simulation step with 'infection_start_step' + 'infection_duration_steps'."
  },
  "data_sources": [],
  "code_structure": {
    "files": [
      {
        "name": "config.py",
        "description": "Defines simulation parameters and configuration."
      },
      {
        "name": "agent.py",
        "description": "Defines the Person agent class, including its attributes, state transitions, and behaviors (interact_with_others, transition_state_based_on_rules)."
      },
      {
        "name": "environment.py",
        "description": "Manages the collection of agents and the simulation loop. Handles stepping agents and potentially resolving interactions."
      },
      {
        "name": "simulation.py",
        "description": "Main script to set up the simulation, initialize agents and environment, run the simulation loop, and collect/report metrics."
      },
      {
        "name": "metrics.py",
        "description": "Contains functions or classes to track and calculate simulation metrics over time."
      }
    ],
    "dependencies": [
      "random",
      "collections"
    ]
  }
}