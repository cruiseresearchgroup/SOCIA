{
  "model_type": "agent_based",
  "description": "An agent-based simulation modeling the spread of a simple virus within a population. Each individual is represented as an agent with a specific health state (Susceptible, Infected, Recovered) and interacts with other agents based on defined probabilities and rates.",
  "entities": [
    {
      "name": "Person",
      "attributes": [
        "id",
        "health_state",
        "time_in_state"
      ],
      "behaviors": [
        "interact_with_others",
        "update_health_state"
      ],
      "initialization": {
        "method": "specified",
        "parameters": {
          "health_state": "Initial state assigned based on 'initial_infected_count' parameter. Others start as 'Susceptible'.",
          "time_in_state": "Starts at 0 for all agents."
        }
      }
    }
  ],
  "behaviors": [
    {
      "name": "interact_with_others",
      "description": "Each agent attempts to interact with a specified number of other randomly selected agents in the population during each time step.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "interactions_per_person_per_step": "Number of interaction attempts per agent per simulation step."
      },
      "algorithm": "For each agent, select 'interactions_per_person_per_step' other agents randomly from the total population (can be with replacement for simplicity in a well-mixed model). For each pair, trigger the 'encounter_and_transmission' interaction."
    },
    {
      "name": "update_health_state",
      "description": "Updates the agent's health state based on elapsed time in the current state. Specifically, handles transition from Infected to Recovered.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "recovery_time": "The duration an agent stays in the 'Infected' state before recovering."
      },
      "algorithm": "If the agent's health_state is 'Infected', increment 'time_in_state'. If 'time_in_state' reaches or exceeds 'recovery_time', change health_state to 'Recovered' and reset 'time_in_state' to 0. Susceptible and Recovered states do not change via this behavior."
    }
  ],
  "interactions": [
    {
      "name": "encounter_and_transmission",
      "description": "Defines the potential for virus transmission when two agents encounter each other.",
      "entities_involved": [
        "Person",
        "Person"
      ],
      "trigger": "An encounter between two agents, initiated by the 'interact_with_others' behavior.",
      "effect": "If one agent is 'Susceptible' and the other is 'Infected', there is a 'transmission_probability' chance that the 'Susceptible' agent becomes 'Infected'. If transmission occurs, the newly infected agent's 'time_in_state' is reset to 0, and the global 'cumulative_infections' count is incremented."
    }
  ],
  "environment": {
    "type": "well-mixed",
    "dimensions": null,
    "time_step": 1,
    "time_unit": "day"
  },
  "parameters": {
    "population_size": 1000,
    "initial_infected_count": 1,
    "transmission_probability": 0.05,
    "recovery_time": 14,
    "interactions_per_person_per_step": 5,
    "simulation_steps": 200,
    "random_seed": null
  },
  "initialization": {
    "population_size": "parameter 'population_size'",
    "initial_infected_count": "parameter 'initial_infected_count'",
    "random_seed": "Optional parameter 'random_seed' for reproducibility. If null, use system time."
  },
  "algorithms": {
    "Simulation Step": "Loop for 'simulation_steps' iterations. In each iteration: 1. For each agent, execute the 'interact_with_others' behavior. 2. For each agent, execute the 'update_health_state' behavior. 3. Update global metrics (S, I, R counts, cumulative infections) based on agent states.",
    "Agent Creation": "Create 'population_size' instances of the Person entity. Assign unique IDs. Randomly select 'initial_infected_count' agents and set their 'health_state' to 'Infected' and 'time_in_state' to 0. Set the remaining agents' 'health_state' to 'Susceptible' and 'time_in_state' to 0."
  },
  "data_sources": [],
  "code_structure": {
    "files": [
      {
        "name": "main.py",
        "description": "Entry point of the simulation. Handles parameter loading, initializes the simulation environment and agents, runs the simulation loop, collects results, and potentially visualizes/saves output."
      },
      {
        "name": "agent.py",
        "description": "Defines the 'Person' class with attributes (id, health_state, time_in_state) and methods corresponding to behaviors (interact_with_others, update_health_state)."
      },
      {
        "name": "simulation.py",
        "description": "Manages the simulation state, including the list of agents, global parameters, current time step, and metric tracking. Contains the main simulation step logic."
      },
      {
        "name": "environment.py",
        "description": "In this simple well-mixed model, this might be minimal, perhaps just holding the list of all agents and providing methods for random selection."
      },
      {
        "name": "metrics.py",
        "description": "Handles calculation and storage of simulation metrics (S, I, R counts, cumulative infections) at each time step."
      }
    ],
    "dependencies": [
      "random",
      "json",
      "matplotlib"
    ]
  }
}