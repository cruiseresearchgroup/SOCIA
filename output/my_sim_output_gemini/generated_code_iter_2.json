{
  "code": "# main.py\nimport random\nimport matplotlib.pyplot as plt\nfrom simulation import Simulation\nfrom agent import Person\nfrom environment import Environment\nfrom metrics import MetricsTracker\n\ndef main():\n    \"\"\"\n    Main function to set up, run, and visualize the simulation.\n    \"\"\"\n    # Define simulation parameters based on the model plan\n    parameters = {\n        \"population_size\": 1000,\n        \"initial_infected_count\": 1,\n        \"transmission_probability\": 0.05,\n        \"recovery_time\": 14, # in simulation steps\n        \"interactions_per_person_per_step\": 5,\n        \"simulation_steps\": 200,\n        \"random_seed\": 42 # Use a fixed seed for reproducibility, set to None for random\n    }\n\n    # Set random seed if specified\n    if parameters[\"random_seed\"] is not None:\n        random.seed(parameters[\"random_seed\"])\n        print(f\"Using random seed: {parameters['random_seed']}\")\n    else:\n        print(\"Using system time for random seed.\")\n\n    # --- Input Validation (Basic) ---\n    if parameters[\"initial_infected_count\"] > parameters[\"population_size\"]:\n        print(\"Error: Initial infected count cannot exceed population size.\")\n        return\n    if parameters[\"initial_infected_count\"] < 0 or parameters[\"population_size\"] <= 0:\n         print(\"Error: Population size and initial infected count must be non-negative.\")\n         return\n    if parameters[\"transmission_probability\"] < 0 or parameters[\"transmission_probability\"] > 1:\n         print(\"Error: Transmission probability must be between 0 and 1.\")\n         return\n    if parameters[\"recovery_time\"] <= 0:\n        print(\"Warning: Recovery time is zero or negative. Infected individuals may not recover.\")\n    if parameters[\"interactions_per_person_per_step\"] < 0:\n        print(\"Warning: Interactions per person per step is negative. No interactions will occur.\")\n    if parameters[\"simulation_steps\"] <= 0:\n        print(\"Warning: Simulation steps is zero or negative. Simulation will not run.\")\n\n\n    print(\"Initializing simulation...\")\n    print(f\"Parameters: {parameters}\")\n\n    # Create and run the simulation\n    simulation = Simulation(parameters)\n    print(\"Running simulation...\")\n    simulation.run(parameters[\"simulation_steps\"])\n    print(\"Simulation finished.\")\n\n    # Get results\n    metrics = simulation.get_metrics()\n\n    # --- Visualization ---\n    print(\"Generating plots...\")\n    time_steps = range(len(metrics['susceptible_counts']))\n\n    plt.figure(figsize=(12, 8))\n\n    # Plot SIR curves\n    plt.subplot(2, 1, 1)\n    plt.plot(time_steps, metrics['susceptible_counts'], label='Susceptible', color='blue')\n    plt.plot(time_steps, metrics['infected_counts'], label='Infected', color='red')\n    plt.plot(time_steps, metrics['recovered_counts'], label='Recovered', color='green')\n    plt.xlabel(\"Time Steps\")\n    plt.ylabel(\"Number of Individuals\")\n    plt.title(\"Epidemic Spread Over Time (SIR Curves)\")\n    plt.legend()\n    plt.grid(True)\n\n    # Plot Cumulative Infections\n    plt.subplot(2, 1, 2)\n    plt.plot(time_steps, metrics['cumulative_infections'], label='Cumulative Infections', color='purple')\n    plt.xlabel(\"Time Steps\")\n    plt.ylabel(\"Number of Individuals\")\n    plt.title(\"Cumulative Infections Over Time\")\n    plt.legend()\n    plt.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n\n    # --- Basic Validation Check (Conservation of Population) ---\n    print(\"\\n--- Basic Validation ---\")\n    initial_pop = parameters['population_size']\n    final_s = metrics['susceptible_counts'][-1]\n    final_i = metrics['infected_counts'][-1]\n    final_r = metrics['recovered_counts'][-1]\n    final_pop = final_s + final_i + final_r\n\n    print(f\"Initial Population: {initial_pop}\")\n    print(f\"Final S: {final_s}, Final I: {final_i}, Final R: {final_r}\")\n    print(f\"Final S + I + R: {final_pop}\")\n\n    if final_pop == initial_pop:\n        print(\"Validation Check: Population size conserved. (Passed)\")\n    else:\n        print(f\"Validation Check: Population size changed! Expected {initial_pop}, got {final_pop}. (Failed)\")\n\n    # --- Basic Validation Check (Epidemic Extinction) ---\n    if metrics['infected_counts'][-1] == 0:\n        print(\"Validation Check: Epidemic reached extinction. (Passed)\")\n    elif metrics['infected_counts'][-1] > 0 and parameters['simulation_steps'] > parameters['recovery_time']:\n         print(f\"Validation Check: Epidemic did not reach extinction (Infected count > 0 at end: {metrics['infected_counts'][-1]}). (Warning/Check)\")\n    else:\n         print(\"Validation Check: Epidemic extinction not fully evaluated (simulation might be too short).\")\n\nif __name__ == \"__main__\":\n    main()",
  "code_summary": "Generated 116 lines of code containing 0 classes and 1 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person"
    ],
    "behaviors": [
      "interact_with_others",
      "update_health_state"
    ]
  }
}