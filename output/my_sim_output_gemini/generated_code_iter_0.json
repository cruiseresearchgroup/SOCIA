{
  "code": "# main.py\n\"\"\"\nMain entry point for the Simple Epidemic Simulation.\n\nSets up the simulation environment, runs the simulation for a specified number of steps,\ncollects metrics, and visualizes the results.\n\"\"\"\n\nimport random\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\n# Import custom modules\nfrom config import SimulationConfig\nfrom utils import set_random_seed, get_random_float\nfrom person import Person\nfrom simulation_env import SimulationEnv\nfrom metrics import MetricsTracker\n\ndef main():\n    \"\"\"\n    Initializes and runs the epidemic simulation.\n    \"\"\"\n    print(\"Starting Simple Epidemic Simulation...\")\n\n    # Load configuration\n    config = SimulationConfig()\n    params = config.get_params()\n    print(f\"Simulation Parameters: {params}\")\n\n    # Set random seed if specified\n    if params[\"random_seed\"] is not None:\n        set_random_seed(params[\"random_seed\"])\n        print(f\"Random seed set to {params['random_seed']}\")\n    else:\n        print(\"No random seed specified, using default randomness.\")\n\n    # Initialize simulation environment and agents\n    env = SimulationEnv(params)\n    print(f\"Population initialized with {params['population_size']} agents.\")\n    print(f\"Initial state: Susceptible={env.count_status('Susceptible')}, Infected={env.count_status('Infected')}, Recovered={env.count_status('Recovered')}, Dead={env.count_status('Dead')}\")\n\n    # Initialize metrics tracker\n    metrics_tracker = MetricsTracker()\n\n    # Run simulation loop\n    print(f\"Running simulation for {params['simulation_steps']} steps...\")\n    for step in range(params[\"simulation_steps\"]):\n        # Record metrics at the beginning of the step\n        metrics_tracker.record_step(env.get_agents())\n\n        # Run one simulation step\n        env.run_step()\n\n        # Optional: Print progress\n        if (step + 1) % 10 == 0 or step == 0 or step == params[\"simulation_steps\"] - 1:\n            print(f\"Step {step + 1}/{params['simulation_steps']} completed.\")\n\n    print(\"Simulation finished.\")\n\n    # Record final metrics\n    metrics_tracker.record_step(env.get_agents())\n\n    # Get collected data\n    simulation_data = metrics_tracker.get_data()\n\n    # --- Validation Checks ---\n    print(\"\\nPerforming validation checks...\")\n\n    # 1. Population Conservation\n    initial_pop = params['population_size']\n    for i, step_data in enumerate(simulation_data):\n        current_pop = step_data['Susceptible'] + step_data['Infected'] + step_data['Recovered'] + step_data['Dead']\n        if current_pop != initial_pop:\n            print(f\"Validation Warning: Population not conserved at step {i}. Expected {initial_pop}, got {current_pop}\")\n    print(\"Population Conservation check completed (warnings printed if any).\")\n\n    # 2. Valid State Transitions (Implicitly handled by code logic)\n    print(\"Valid State Transitions check relies on correct logic implementation (S->I, I->R, I->D).\")\n\n    # 3. Epidemic Curve Shape (Visual inspection after plotting)\n    print(\"Epidemic Curve Shape will be visible in the plot.\")\n\n\n    # Visualize results\n    print(\"Generating plots...\")\n    plot_simulation_results(simulation_data)\n    print(\"Plots generated. Close plot window to exit.\")\n\n\ndef plot_simulation_results(data):\n    \"\"\"\n    Plots the simulation results (counts of S, I, R, D) over time.\n\n    Args:\n        data (list): A list of dictionaries, where each dictionary contains\n                     the counts for a simulation step.\n    \"\"\"\n    steps = list(range(len(data)))\n    susceptible_counts = [d['Susceptible'] for d in data]\n    infected_counts = [d['Infected'] for d in data]\n    recovered_counts = [d['Recovered'] for d in data]\n    dead_counts = [d['Dead'] for d in data]\n    total_cases_counts = [d['Total Cases'] for d in data]\n\n    plt.figure(figsize=(12, 8))\n\n    plt.plot(steps, susceptible_counts, label='Susceptible', color='blue')\n    plt.plot(steps, infected_counts, label='Infected', color='red')\n    plt.plot(steps, recovered_counts, label='Recovered', color='green')\n    plt.plot(steps, dead_counts, label='Dead', color='black')\n    plt.plot(steps, total_cases_counts, label='Total Cases (Cumulative)', color='purple', linestyle='--')\n\n\n    plt.xlabel(\"Simulation Steps\")\n    plt.ylabel(\"Number of People\")\n    plt.title(\"Simple Epidemic Simulation (SIR+D Model)\")\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nif __name__ == \"__main__\":\n    main()",
  "code_summary": "Generated 123 lines of code containing 0 classes and 2 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person"
    ],
    "behaviors": [
      "update_status"
    ]
  }
}