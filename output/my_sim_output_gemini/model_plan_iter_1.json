{
  "model_type": "agent_based",
  "description": "An agent-based simulation modeling the spread of a virus within a fixed population. Each agent represents an individual with a health state that can change based on interactions and time.",
  "entities": [
    {
      "name": "Person",
      "attributes": [
        {
          "name": "health_state",
          "type": "enum",
          "values": [
            "Susceptible",
            "Infected",
            "Recovered"
          ],
          "description": "Current health status of the individual."
        },
        {
          "name": "infection_timer",
          "type": "integer",
          "description": "Countdown until recovery for infected individuals. Only relevant if health_state is 'Infected'."
        }
      ],
      "behaviors": [
        "UpdateState",
        "AttemptTransmission"
      ],
      "initialization": {
        "method": "specified_random",
        "parameters": {
          "population_size": "parameter:population_size",
          "initial_infected_count": "parameter:initial_infected_count",
          "health_state": "Susceptible",
          "infection_timer": 0
        },
        "description": "All agents start as Susceptible, except for a specified number who are randomly selected to start as Infected with their infection_timer set to the infection_duration_steps."
      }
    }
  ],
  "behaviors": [
    {
      "name": "UpdateState",
      "description": "Updates the agent's health state based on internal logic, primarily the infection timer.",
      "applicable_to": [
        "Person"
      ],
      "parameters": null,
      "algorithm": "If agent's health_state is 'Infected': decrement infection_timer. If infection_timer reaches 0: change health_state to 'Recovered'. No change if state is 'Susceptible' or 'Recovered'."
    },
    {
      "name": "AttemptTransmission",
      "description": "When interacting with another agent, an infected agent attempts to transmit the virus.",
      "applicable_to": [
        "Person"
      ],
      "parameters": {
        "transmission_probability": "parameter:transmission_probability",
        "infection_duration_steps": "parameter:infection_duration_steps"
      },
      "algorithm": "If self.health_state is 'Infected' AND other.health_state is 'Susceptible': generate a random number between 0 and 1. If random number < transmission_probability: change other.health_state to 'Infected' and set other.infection_timer to infection_duration_steps."
    }
  ],
  "interactions": [
    {
      "name": "Virus Transmission",
      "description": "An interaction event where an infected agent comes into contact with a susceptible agent, potentially leading to infection based on probability.",
      "entities_involved": [
        "Person",
        "Person"
      ],
      "trigger": "Contact (simulated via random pairing)",
      "effect": "Potential change of 'Susceptible' agent's state to 'Infected'."
    }
  ],
  "environment": {
    "type": "non_spatial",
    "dimensions": null,
    "time_step": 1,
    "time_unit": "simulation_step",
    "description": "A well-mixed, non-spatial environment where any agent can potentially interact with any other agent. Time progresses in discrete steps."
  },
  "parameters": {
    "population_size": 1000,
    "initial_infected_count": 1,
    "transmission_probability": 0.1,
    "infection_duration_steps": 10,
    "contact_rate_per_step": 5,
    "simulation_steps": 100,
    "random_seed": 42
  },
  "initialization": {
    "population_size": "parameter:population_size",
    "initial_infected_count": "parameter:initial_infected_count",
    "random_seed": "parameter:random_seed",
    "procedure": "Create 'population_size' Person agents. Set all to 'Susceptible'. Randomly select 'initial_infected_count' agents, set their 'health_state' to 'Infected' and 'infection_timer' to 'infection_duration_steps'."
  },
  "algorithms": {
    "SimulationLoop": "Iterate for 'simulation_steps' steps. In each step: 1. Record current state counts (S, I, R). 2. Execute interactions: For each agent, randomly select 'contact_rate_per_step' partners from the population and execute the 'AttemptTransmission' logic between the agent and each partner. Note: This should ideally happen in a way that infections take effect at the *end* of the interaction phase of the step to avoid issues with immediate re-interaction. A common pattern is to collect potential state changes and apply them simultaneously after all interactions for the step are determined. 3. Execute behaviors: For each agent, run the 'UpdateState' logic.",
    "RandomPartnerSelection": "For a given agent, randomly select another agent from the population (excluding self) 'contact_rate_per_step' times. Selection can be with or without replacement, depending on desired model nuance (without replacement is slightly more realistic for distinct contacts).",
    "StateCounting": "Iterate through all agents and count how many are in 'Susceptible', 'Infected', and 'Recovered' states. Calculate cumulative infections."
  },
  "data_sources": [],
  "code_structure": {
    "files": [
      {
        "name": "agent.py",
        "description": "Defines the Person agent class with attributes (health_state, infection_timer) and methods for behaviors (update_state, attempt_transmission)."
      },
      {
        "name": "environment.py",
        "description": "Defines the simulation environment, managing the list of agents and providing methods for interactions (e.g., random pairing)."
      },
      {
        "name": "simulation.py",
        "description": "Contains the main simulation loop, initialization logic, parameter loading, and data collection/reporting."
      },
      {
        "name": "metrics.py",
        "description": "Functions or a class to track and record simulation metrics (S, I, R counts, cumulative infections) over time."
      },
      {
        "name": "main.py",
        "description": "Entry point to set up parameters, initialize the simulation, run it, and potentially trigger visualization/analysis."
      }
    ],
    "dependencies": [
      "random",
      "collections"
    ]
  }
}