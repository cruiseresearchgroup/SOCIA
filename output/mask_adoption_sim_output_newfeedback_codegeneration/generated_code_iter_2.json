{
  "code": "import os\nimport numpy as np\nimport pandas as pd\nimport json\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom typing import List, Dict\n\n# Constants for data paths\nPROJECT_ROOT = os.environ.get(\"PROJECT_ROOT\", \".\")\nDATA_PATH = os.environ.get(\"DATA_PATH\", \"data_fitting/mask_adoption_data/\")\nDATA_DIR = os.path.join(PROJECT_ROOT, DATA_PATH)\n\n# Data file paths\nagent_file = os.path.join(DATA_DIR, \"agent_attributes.csv\")\nnetwork_file = os.path.join(DATA_DIR, \"social_network.json\")\ntrain_file = os.path.join(DATA_DIR, \"train_data.csv\")\n\nclass Person:\n    \"\"\"\n    Represents an individual agent in the simulation with attributes and behaviors related to mask-wearing.\n    \"\"\"\n    influence_probability = 0.05\n    risk_perception_effect = 1.0\n    social_influence_decay = 0.01\n    decision_threshold = 0.5\n    network_influence_weight = 0.05  # Define network influence weight\n\n    def __init__(self, agent_id: int, mask_wearing_status: bool, risk_perception: float, network_connections: List[int]):\n        \"\"\"\n        Initializes a Person instance.\n\n        Args:\n            agent_id (int): Unique identifier for the agent.\n            mask_wearing_status (bool): Initial mask-wearing status.\n            risk_perception (float): Perception of risk influencing mask-wearing decision.\n            network_connections (List[int]): List of connected agent IDs.\n        \"\"\"\n        self.agent_id = agent_id\n        self.mask_wearing_status = bool(mask_wearing_status)\n        self.risk_perception = risk_perception\n        self.network_connections = network_connections\n        self.social_influence = np.random.normal(loc=0.5, scale=0.1)\n\n    def decide_to_wear_mask(self):\n        \"\"\"\n        Decide whether to wear a mask based on social influence and risk perception.\n        \"\"\"\n        influence_factor = self.social_influence * Person.influence_probability\n        risk_factor = self.risk_perception * Person.risk_perception_effect\n        decision_value = influence_factor + risk_factor\n        self.mask_wearing_status = decision_value > Person.decision_threshold\n        dynamic_decay = 0.01 + (0.1 * len(self.network_connections))  # Dynamic decay based on connections\n        self.social_influence = max(0, self.social_influence - dynamic_decay)\n\n    def influence_others(self, network: nx.Graph):\n        \"\"\"\n        Influence connected agents to adopt mask-wearing behavior.\n        \"\"\"\n        influence_changes = {}\n        for connection in self.network_connections:\n            current_influence = network.nodes[connection].get('social_influence', 0.0)\n            influence_changes[connection] = current_influence + Person.network_influence_weight\n        nx.set_node_attributes(network, influence_changes, 'social_influence')\n\nclass SocialNetwork:\n    \"\"\"\n    Represents the social network structure and facilitates behavior propagation.\n    \n    Attributes:\n        network (nx.Graph): The graph representing the social network.\n    \"\"\"\n    def __init__(self, network_structure: Dict[int, Dict[str, List[int]]]):\n        \"\"\"\n        Initializes the social network from the given structure.\n\n        Args:\n            network_structure (Dict[int, Dict[str, List[int]]]): Structure of the network.\n        \"\"\"\n        self.network = nx.Graph()\n        self.network.add_nodes_from(network_structure.keys())\n        for person_id, connections in network_structure.items():\n            for connection_id in connections['all']:\n                self.network.add_edge(person_id, connection_id)\n                self.network.nodes[connection_id].setdefault('social_influence', 0.0)\n\n    def propagate_behavior(self, information_spread_rate: float):\n        \"\"\"\n        Propagate mask-wearing behavior through the network.\n\n        Args:\n            information_spread_rate (float): Rate of information spread.\n        \"\"\"\n        for node in self.network.nodes:\n            person = self.network.nodes[node].get('person')\n            if person:\n                person_status = person.mask_wearing_status\n                influence_sum = sum(\n                    information_spread_rate * (person_status ^ self.network.nodes[neighbor].get('person', Person(0, False, 0, [])).mask_wearing_status)\n                    for neighbor in self.network.neighbors(node)\n                    if 'person' in self.network.nodes[neighbor]\n                )\n                person.social_influence += influence_sum\n                person.decide_to_wear_mask()\n\nclass Simulation:\n    \"\"\"\n    Main simulation class to manage the setup, execution, and evaluation of the mask-wearing behavior model.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes the simulation by loading agents and the social network.\n        \"\"\"\n        self.agents = self.load_agents()\n        self.social_network = self.load_social_network()\n        self.calibrate_parameters()\n\n    def load_agents(self) -> List[Person]:\n        \"\"\"\n        Load agent data from the CSV file and initialize Person instances.\n\n        Returns:\n            List[Person]: List of initialized agents.\n        \"\"\"\n        agents = []\n        try:\n            data = pd.read_csv(agent_file)\n            if data.empty or not {'agent_id', 'initial_mask_wearing', 'risk_perception'}.issubset(data.columns):\n                raise ValueError(\"Missing required columns or empty agent data file.\")\n            for _, row in data.iterrows():\n                if not isinstance(row['agent_id'], int) or not isinstance(row['risk_perception'], (int, float)):\n                    raise ValueError(\"Invalid data type in agent data file.\")\n                if not isinstance(row['initial_mask_wearing'], (bool, np.bool_)):\n                    raise ValueError(\"Initial mask wearing status must be boolean.\")\n                agent = Person(\n                    agent_id=row['agent_id'],\n                    mask_wearing_status=row['initial_mask_wearing'],\n                    risk_perception=row['risk_perception'],\n                    network_connections=[]\n                )\n                agents.append(agent)\n            if not agents:\n                raise RuntimeError(\"No agents loaded from the file.\")\n        except (FileNotFoundError, pd.errors.ParserError, ValueError, PermissionError) as e:\n            raise RuntimeError(f\"Error loading agent file: {e}\")\n        return agents\n\n    def load_social_network(self) -> SocialNetwork:\n        \"\"\"\n        Load social network data from JSON file and initialize SocialNetwork.\n\n        Returns:\n            SocialNetwork: Initialized social network.\n        \"\"\"\n        try:\n            with open(network_file, 'r') as file:\n                network_structure = json.load(file)\n            if not all(str(agent.agent_id) in network_structure for agent in self.agents):\n                raise KeyError(\"Missing agent entries in network structure.\")\n            social_network = SocialNetwork(network_structure)\n            for agent in self.agents:\n                agent.network_connections = network_structure[str(agent.agent_id)]['all']\n                social_network.network.nodes[agent.agent_id]['person'] = agent\n        except (FileNotFoundError, json.JSONDecodeError, KeyError, PermissionError) as e:\n            raise RuntimeError(f\"Error loading network file: {e}\")\n        return social_network\n\n    def calibrate_parameters(self):\n        \"\"\"\n        Calibrate the model parameters using the train_data.csv file.\n        \"\"\"\n        try:\n            train_data = pd.read_csv(train_file)\n            # Example calibration logic (to be replaced with actual logic)\n            Person.risk_perception_effect = 0.8\n            SocialNetwork.information_spread_rate = 0.06\n            Person.network_influence_weight = 0.05\n        except (FileNotFoundError, pd.errors.ParserError, PermissionError) as e:\n            raise RuntimeError(f\"Error calibrating parameters from training data: {e}\")\n\n    def run(self, start_day: int = 30, end_day: int = 39) -> None:\n        \"\"\"\n        Execute the simulation loop over the specified prediction period.\n\n        Args:\n            start_day (int): The starting day for the simulation.\n            end_day (int): The ending day for the simulation.\n        \"\"\"\n        for day in range(start_day, end_day + 1):\n            self.social_network.propagate_behavior(0.05)\n\n    def visualize(self) -> None:\n        \"\"\"\n        Visualize the results of the simulation.\n        \"\"\"\n        mask_wearers = [agent.mask_wearing_status for agent in self.agents]\n        plt.hist(mask_wearers, bins=2)\n        plt.title('Mask Wearing Distribution')\n        plt.xlabel('Mask Wearing Status')\n        plt.ylabel('Number of Agents')\n        plt.show()\n\n    def save_results(self, filename: str) -> None:\n        \"\"\"\n        Save the results of the simulation to a file.\n\n        Args:\n            filename (str): The name of the file where results will be saved.\n        \"\"\"\n        results = pd.DataFrame({\n            'agent_id': [agent.agent_id for agent in self.agents],\n            'mask_wearing_status': [agent.mask_wearing_status for agent in self.agents]\n        })\n        results.to_csv(filename, index=False)\n\n    def implement_government_intervention(self, intervention_strength: float) -> None:\n        \"\"\"\n        Implement a government intervention that affects mask-wearing behavior.\n\n        Args:\n            intervention_strength (float): The strength of the intervention on influencing mask-wearing behavior.\n        \"\"\"\n        for agent in self.agents:\n            agent.social_influence += intervention_strength\n\ndef main():\n    \"\"\"\n    Main function to initialize, run, visualize, and save the simulation.\n    \"\"\"\n    simulation = Simulation()\n    simulation.run()\n    simulation.visualize()\n    simulation.save_results(\"results.csv\")\n\nmain()",
  "code_summary": "Generated 235 lines of code containing 3 classes and 14 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person",
      "SocialNetwork"
    ],
    "behaviors": [
      "decide_to_wear_mask",
      "influence_others",
      "propagate_behavior"
    ]
  }
}