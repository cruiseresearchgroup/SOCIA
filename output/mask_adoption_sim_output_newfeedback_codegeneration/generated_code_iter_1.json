{
  "code": "import os\nimport numpy as np\nimport pandas as pd\nimport json\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom typing import List, Dict\n\n# Constants for data paths\nPROJECT_ROOT = os.environ.get(\"PROJECT_ROOT\", \".\")\nDATA_PATH = os.environ.get(\"DATA_PATH\", \"data_fitting/mask_adoption_data/\")\nDATA_DIR = os.path.join(PROJECT_ROOT, DATA_PATH)\n\n# Data file paths\nagent_file = os.path.join(DATA_DIR, \"agent_attributes.csv\")\nnetwork_file = os.path.join(DATA_DIR, \"social_network.json\")\ntrain_file = os.path.join(DATA_DIR, \"train_data.csv\")\n\nclass Person:\n    \"\"\"\n    Represents an individual agent in the simulation with attributes and behaviors related to mask-wearing.\n    \"\"\"\n    influence_probability = 0.05\n    risk_perception_effect = 1.0\n    social_influence_decay = 0.01\n    decision_threshold = 0.5\n    \n    def __init__(self, agent_id: int, mask_wearing_status: bool, risk_perception: float, network_connections: List[int]):\n        self.agent_id = agent_id\n        self.mask_wearing_status = mask_wearing_status\n        self.risk_perception = risk_perception\n        self.network_connections = network_connections\n        self.social_influence = 0.0\n    \n    def decide_to_wear_mask(self):\n        \"\"\"\n        Decide whether to wear a mask based on social influence and risk perception.\n        \"\"\"\n        influence_factor = self.social_influence * Person.influence_probability\n        risk_factor = self.risk_perception * Person.risk_perception_effect\n        decision_value = influence_factor + risk_factor\n        self.mask_wearing_status = decision_value > Person.decision_threshold\n        self.social_influence = max(0, self.social_influence - Person.social_influence_decay)\n    \n    def influence_others(self, network: nx.Graph, influence_weight: float):\n        \"\"\"\n        Influence connected agents to adopt mask-wearing behavior.\n        \"\"\"\n        for connection in self.network_connections:\n            if network.nodes[connection]['social_influence'] == 0.0:\n                network.nodes[connection]['social_influence'] += influence_weight\n\nclass SocialNetwork:\n    \"\"\"\n    Represents the social network structure and facilitates behavior propagation.\n    \n    Attributes:\n        network (nx.Graph): The graph representing the social network.\n    \"\"\"\n    def __init__(self, network_structure: Dict[int, Dict[str, List[int]]]):\n        self.network = nx.Graph()\n        self.network.add_nodes_from(network_structure.keys())\n        for person_id, connections in network_structure.items():\n            for connection_id in connections['all']:\n                self.network.add_edge(person_id, connection_id)\n                # Initialize social influence to 0.0\n                self.network.nodes[connection_id]['social_influence'] = 0.0\n\n    def propagate_behavior(self, information_spread_rate: float):\n        \"\"\"\n        Propagate mask-wearing behavior through the network.\n        \"\"\"\n        for node in self.network.nodes:\n            person = self.network.nodes[node].get('person')\n            if person:\n                person_status = person.mask_wearing_status\n                person.social_influence = sum(\n                    self.network.nodes[neighbor]['person'].mask_wearing_status != person_status\n                    for neighbor in self.network.neighbors(node)\n                    if 'person' in self.network.nodes[neighbor]\n                )\n                person.decide_to_wear_mask()\n\nclass Simulation:\n    \"\"\"\n    Main simulation class to manage the setup, execution, and evaluation of the mask-wearing behavior model.\n    \"\"\"\n    def __init__(self):\n        self.agents = self.load_agents()\n        self.social_network = self.load_social_network()\n    \n    def load_agents(self) -> List[Person]:\n        \"\"\"\n        Load agent data from the CSV file and initialize Person instances.\n        \"\"\"\n        agents = []\n        try:\n            data = pd.read_csv(agent_file)\n            if not {'agent_id', 'initial_mask_wearing', 'risk_perception'}.issubset(data.columns):\n                raise ValueError(\"Missing required columns in agent data file.\")\n            for _, row in data.iterrows():\n                if not isinstance(row['agent_id'], int) or not isinstance(row['risk_perception'], (int, float)):\n                    raise ValueError(\"Invalid data type in agent data file.\")\n                agent = Person(\n                    agent_id=row['agent_id'],\n                    mask_wearing_status=row['initial_mask_wearing'],\n                    risk_perception=row['risk_perception'],\n                    network_connections=[]\n                )\n                agents.append(agent)\n        except (FileNotFoundError, pd.errors.ParserError, ValueError) as e:\n            raise RuntimeError(f\"Error loading agent file: {e}\")\n        return agents\n\n    def load_social_network(self) -> SocialNetwork:\n        \"\"\"\n        Load social network data from JSON file and initialize SocialNetwork.\n        \"\"\"\n        try:\n            with open(network_file, 'r') as file:\n                network_structure = json.load(file)\n            if not all(str(agent.agent_id) in network_structure for agent in self.agents):\n                raise KeyError(\"Missing agent entries in network structure.\")\n            social_network = SocialNetwork(network_structure)\n            for agent in self.agents:\n                agent.network_connections = network_structure[str(agent.agent_id)]['all']\n                social_network.network.nodes[agent.agent_id]['person'] = agent\n        except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:\n            raise RuntimeError(f\"Error loading network file: {e}\")\n        return social_network\n\n    def run(self, start_day: int = 30, end_day: int = 39):\n        \"\"\"\n        Execute the simulation loop over the specified prediction period.\n        \n        Args:\n            start_day (int): The starting day for the simulation.\n            end_day (int): The ending day for the simulation.\n        \"\"\"\n        for day in range(start_day, end_day + 1):\n            self.social_network.propagate_behavior(0.05)\n\n    def visualize(self):\n        \"\"\"\n        Visualize the results of the simulation.\n        \"\"\"\n        mask_wearers = [agent.mask_wearing_status for agent in self.agents]\n        plt.hist(mask_wearers, bins=2)\n        plt.title('Mask Wearing Distribution')\n        plt.xlabel('Mask Wearing Status')\n        plt.ylabel('Number of Agents')\n        plt.show()\n\n    def save_results(self, filename: str):\n        \"\"\"\n        Save the results of the simulation to a file.\n        \n        Args:\n            filename (str): The name of the file where results will be saved.\n        \"\"\"\n        results = pd.DataFrame({\n            'agent_id': [agent.agent_id for agent in self.agents],\n            'mask_wearing_status': [agent.mask_wearing_status for agent in self.agents]\n        })\n        results.to_csv(filename, index=False)\n\ndef main():\n    \"\"\"\n    Main function to initialize, run, visualize, and save the simulation.\n    \"\"\"\n    simulation = Simulation()\n    simulation.run()\n    simulation.visualize()\n    simulation.save_results(\"results.csv\")\n\n# Execute main for both direct execution and sandbox wrapper invocation\nmain()",
  "code_summary": "Generated 177 lines of code containing 3 classes and 12 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person",
      "SocialNetwork"
    ],
    "behaviors": [
      "decide_to_wear_mask",
      "influence_others",
      "propagate_behavior"
    ]
  }
}