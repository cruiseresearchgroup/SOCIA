system:
  name: "SOCIA-CAMEL"
  version: "0.1.0"
  description: "基于CAMEL架构的社会模拟智能体系统"

llm:
  provider: "gemini"  # options: openai, gemini, anthropic, llama
  system_prompt: "你是SOCIA-CAMEL系统的一部分，一个智能社会模拟代理。"

# LLM提供商配置
llm_providers:
  openai:
    model: "gpt-4o"
    temperature: 0.7
    max_tokens: 4000
    api_key: ""  # 通过环境变量或keys.py设置
  gemini:
    model: "models/gemini-1.5-pro"
    temperature: 0.7
    max_tokens: 8192
    api_key: ""
  anthropic:
    model: "claude-3-opus-20240229"
    temperature: 0.7
    max_tokens: 4000
    api_key: ""
  llama:
    model_path: "./models/llama-3-8b-instruct"
    temperature: 0.7
    max_tokens: 2048

# CAMEL架构配置
camel:
  memory:
    max_history_length: 20
    importance_threshold: 0.5
  
  actions:
    # 通用动作
    general:
      - "思考"
      - "推理"
      - "分析"
      - "总结"
    
    # 任务理解动作
    task_understanding:
      - "解析需求"
      - "明确目标"
      - "提取关键信息"
    
    # 数据分析动作
    data_analysis:
      - "收集数据"
      - "处理数据"
      - "验证数据"
      - "可视化数据"
    
    # 模型规划动作
    model_planning:
      - "选择模型"
      - "设计架构"
      - "确定参数"
    
    # 代码生成动作
    code_generation:
      - "编写代码"
      - "优化代码"
      - "注释代码"
    
    # 模拟执行动作
    simulation_execution:
      - "准备环境"
      - "执行模拟"
      - "收集结果"
      - "分析结果"

# 智能体配置
agents:
  task_understanding:
    role: "任务理解专家"
    goal: "准确理解用户需求并将其转化为明确的模拟任务"
    prompt_template: "templates/task_understanding_prompt.txt"
    
  data_analysis:
    role: "数据分析专家"
    goal: "分析和处理模拟所需的数据"
    prompt_template: "templates/data_analysis_prompt.txt"
    
  model_planning:
    role: "模型规划专家"
    goal: "设计适合任务的模拟模型和架构"
    prompt_template: "templates/model_planning_prompt.txt"
    
  code_generation:
    role: "代码生成专家"
    goal: "将模型规划转换为可执行的Python代码"
    prompt_template: "templates/code_generation_prompt.txt"
    
  simulation_execution:
    role: "模拟执行专家"
    goal: "执行模拟代码并收集结果"
    prompt_template: "templates/simulation_execution_prompt.txt"

# 工作流配置
workflow:
  max_iterations: 3
  conversation_turns_per_iteration: 5
  parallel_execution: false
  save_intermediate_results: true

# 模拟模型配置
simulation_models:
  epidemic:
    name: "SIR流行病模型"
    parameters:
      - "人口规模"
      - "初始感染数"
      - "传播率"
      - "恢复率"
    visualization:
      - "时间序列图"
      - "空间分布图"

# 输出配置
output:
  save_conversations: true
  save_reasoning_chains: true
  save_format: ["python", "json", "visualization"]
  visualization_types: ["agent_trajectories", "heatmaps", "network_graphs", "timeseries"] 