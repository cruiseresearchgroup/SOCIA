{
  "task_objective": {
    "description": "I am now tasked with designing a social simulator. The simulator's goal is to simulate the daily activity trajectories of urban residents. Each trajectory consists of an ordered sequence of location-time pairs: {(l₀, t₀), (l₁, t₁), ..., (lₙ, tₙ)}, representing the locations visited by an individual at specific times.",
    "simulation_focus": "We adopt an LLM-based agent framework to generate daily mobility trajectories for individual urban residents. The core assumption is that a person’s daily activities are driven by two key factors: 1. Habitual Behavioral Pattern (Pattern); 2. Instantaneous Daily Motivation (Motivation). The architecture of our agent includes three primary modules: 1. Action: Generates daily mobility trajectories based on contextual and environmental information. 2. Memory: Stores previously inferred patterns and motivations from historical behavior. 3. Planning: Identifies or refines action plans by summarizing and reconstructing both patterns and motivations. We use LLM prompting to extract a representative behavioral pattern from a resident’s historical trajectory data. A pattern is a natural language description of a resident’s typical mobility habits derived from statistical summaries of their previous activities. An example of such a pattern might be: “During weekdays, you usually travel over 40 kilometers a day. You begin your daily trip at 09:20:00 and end it at 18:20:00. You typically visit Platform#479 at the beginning of the day and stop by Convenience Store#7665 before returning home. On weekends, you travel similarly, starting at 10:20:00 and ending at 18:20:00, often visiting Bakery#678 in the morning and Sports Club#9 in the evening. You frequently visit Sports Club#9 at 17:00:00, Platform#1330 at 09:00:00, Convenience Store#7665 at 08:00:00, Library#102 at 09:30:00, and Platform#479 at 09:00:00.” Once a resident's Pattern has been identified, we proceed to generate the Motivation for a specific date. The Motivation is inferred from the most recent behavior (e.g., past few days) using LLM prompting, which yields high-level goals such as “maintain fitness” or “purchase essentials”. Then, using both the Pattern and the Motivation, the LLM generates a daily trajectory in a structured JSON format that includes: Arrival time at each location; Explanation of why that location is visited.",
    "Simulator Design Requirements": "You are to build a simulator that generates daily mobility trajectories for urban residents. The simulator should follow this procedure: 1. Behavior Pattern Initialization: For each resident, generate their Pattern once based on their historical data and store it. 2. Daily Trajectory Prediction: When predicting a resident’s trajectory for a specific day: Use the resident’s recent historical activities to generate the Motivation for that day; Combine the Pattern and Motivation as a prompt to the LLM; Generate a logical daily trajectory in JSON format, including time and reason for each location. Data Calibration & Evaluation: Use the provided data to calibrate the simulator; Randomly select a day from a resident’s history; Predict that day’s trajectory and compare it against the ground-truth trajectory; Evaluate using the metrics below; Improve following prompts to optimize metric scores via iterative tuning: (1) From the historical trajectories of urban residents, extract an representative Behavior Pattern through prompting the LLM; the prompt for this process. (2) Based on the behaviors of the past few days, use prompting the LLM to summarize potential Motivation for the current date (e.g., maintaining exercise, purchasing daily necessities); the prompt for this process."
  },
  "data_folder": "data_fitting/llmob/",
  "data_files": {
    "2019Y.JSON": "This file records the daily activity trajectories of residents. For example: “1874”: [“Activities at 2019-01-09: Rest Area#1120 at 10:50:00, Convenience Store#2420 at 11:30:00, Mortuary#127 at 12:40:00, Udon Restaurant#1824 at 13:00:00, Post Office#197 at 13:30:00, Hot Spring#514 at 15:20:00, Rest Area#261 at 17:50:00, Japanese Family Restaurant#1580 at 20:00:00, Steakhouse#1639 at 20:10:00.”]. This entry indicates that resident with ID “1874” had the above activity trajectory on 2019-01-09. Each record, such as “Rest Area#1120 at 10:50:00”, denotes that the resident arrived at “Rest Area#1120” at “10:50:00”. By removing the suffix “#1120”, the remaining part “Rest Area” can be matched to a location category in the file “catto.json”. The corresponding longitude and latitude of “Rest Area#1120” can be found in the file “poi_category_longitude_latitude_complement_alignment_clean.json”.",
    "poi_category_longitude_latitude_complement_alignment_clean.json": "This file maps each POI mentioned in “2019Y.JSON” to its corresponding geographic coordinates. The key is the POI name (e.g., “Rest Area”), and the value is an array of arrays. Each inner array contains: Latitude Longitude Full POI name (e.g., “Rest Area#1061”). Example: [“35.794755”, “139.790482”, “Rest Area#1061”].",
    "catto.json": "This file defines the category for each POI. It is a dictionary where: The key is the POI name (e.g., “Rest Area”); The value is the category it belongs to (e.g., “Travel & Transport”). Example: { “Rest Area”: “Travel & Transport”}."
  },
  "evaluation_metrics": {
    "Step distance (SD)": {
      "description": "The travel distance between each consecutive decision step within a trajectory is collected. This metric evaluates the spatial pattern of an individual’s activities by measuring the distance between two consecutive locations in a trajectory."
    },
    "Step interval (SI)": {
      "description": "The time gap between each consecutive decision step within a trajectory is recorded. This metric evaluates the temporal pattern of an individual’s activities by measuring the time interval between two successive locations on an individual’s trajectory."
    },
    "Jensen-Shannon divergence (JSD)": {
      "description": "After extracting the above characteristics from both the generated and real-world trajectory data, Jensen-Shannon divergence (JSD) is employed to quantify the discrepancy between them. Lower JSD is preferred."
    }
  }
}
