{
  "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Defining Person entity\nclass Person:\n    def __init__(self, health_status='healthy', location=None, immunity=False, infection_status=False):\n        self.health_status = health_status\n        self.location = location\n        self.immunity = immunity\n        self.infection_status = infection_status\n\n    def move(self, grid):\n        # Implementing random walk\n        direction = np.random.choice(['up', 'down', 'left', 'right'])\n        if direction == 'up' and self.location[0] < grid.shape[0] - 1:\n            self.location = (self.location[0] + 1, self.location[1])\n        elif direction == 'down' and self.location[0] > 0:\n            self.location = (self.location[0] - 1, self.location[1])\n        elif direction == 'right' and self.location[1] < grid.shape[1] - 1:\n            self.location = (self.location[0], self.location[1] + 1)\n        elif direction == 'left' and self.location[1] > 0:\n            self.location = (self.location[0], self.location[1] - 1)\n\n    def interact(self, other, interaction_rate):\n        if self.location == other.location and self.infection_status and not other.immunity:\n            if np.random.rand() < interaction_rate:\n                other.infection_status = True\n\n    def recover(self, recovery_rate):\n        if self.infection_status:\n            if np.random.rand() < recovery_rate:\n                self.infection_status = False\n                self.immunity = True\n\n    def die(self, mortality_rate):\n        if self.infection_status:\n            if np.random.rand() < mortality_rate:\n                self.health_status = 'dead'\n                self.infection_status = False\n\nclass City:\n    def __init__(self, dimensions, population_size, initial_infection_rate, recovery_rate, mortality_rate, interaction_rate):\n        self.grid = np.zeros(dimensions)\n        self.population = []\n        self.initial_infection_rate = initial_infection_rate\n        self.recovery_rate = recovery_rate\n        self.mortality_rate = mortality_rate\n        self.interaction_rate = interaction_rate\n        for _ in range(population_size):\n            loc = (np.random.randint(0, dimensions[0]), np.random.randint(0, dimensions[1]))\n            p = Person(location=loc)\n            if np.random.rand() < initial_infection_rate:\n                p.infection_status = True\n            self.population.append(p)\n\n    def simulate_day(self):\n        for person in self.population:\n            if person.health_status == 'dead':\n                continue\n            person.move(self.grid)\n            for other in self.population:\n                if person != other:\n                    person.interact(other, self.interaction_rate)\n            person.recover(self.recovery_rate)\n            person.die(self.mortality_rate)\n\n    def run_simulation(self, days):\n        for _ in range(days):\n            self.simulate_day()\n\n    def plot_population_status(self):\n        statuses = [p.health_status for p in self.population]\n        plt.hist(statuses)\n        plt.title('Population Health Status')\n        plt.xlabel('Status')\n        plt.ylabel('Number of People')\n        plt.show()\n\nif __name__ == \"__main__\":\n    city = City((50, 20), 1000, 0.05, 0.1, 0.02, 0.5)\n    city.run_simulation(100)\n    city.plot_population_status()",
  "code_summary": "Generated 82 lines of code containing 2 classes and 9 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person"
    ],
    "behaviors": [
      "move",
      "interact",
      "recover",
      "die"
    ]
  }
}