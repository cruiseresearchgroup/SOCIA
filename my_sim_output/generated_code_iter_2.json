{
  "code": "import numpy as np\nfrom matplotlib import pyplot as plt\nfrom enum import Enum\nfrom collections import Counter\nimport random\n\n# Enum for health status\nclass HealthStatus(Enum):\n    HEALTHY = 0\n    INFECTED = 1\n    RECOVERED = 2\n    DECEASED = 3\n\n# Class for Person entity\nclass Person:\n    \"\"\"Person class represents a person in the simulation.\"\"\"\n\n    def __init__(self, location):\n        \"\"\"Initialize a person with a location and health status.\"\"\"\n        self.location = location\n        self.health_status = HealthStatus.HEALTHY\n        self.days_infected = 0\n\n    def move(self, dimensions):\n        \"\"\"Move the person randomly within the given dimensions.\"\"\"\n        self.location = [random.randint(0, dimensions[0]), random.randint(0, dimensions[1])]\n\n    def interact(self, other):\n        \"\"\"Interact with another person, potentially spreading or contracting the epidemic.\"\"\"\n        if other.health_status == HealthStatus.INFECTED and self.health_status == HealthStatus.HEALTHY:\n            if np.random.random() < infection_probability:\n                self.health_status = HealthStatus.INFECTED\n\n    def update_health_status(self, recovery_time, death_probability):\n        \"\"\"Update health status of a person based on recovery_time and death_probability.\"\"\"\n        if self.health_status == HealthStatus.INFECTED:\n            self.days_infected += 1\n            if np.random.random() < death_probability:\n                self.health_status = HealthStatus.DECEASED\n            elif self.days_infected >= recovery_time:\n                self.health_status = HealthStatus.RECOVERED\n\n# Class for Simulation\nclass EpidemicSimulation:\n    \"\"\"EpidemicSimulation class represents the simulation environment.\"\"\"\n\n    def __init__(self, dimensions, population_size, initial_infected_count, infection_probability, recovery_time, death_probability):\n        \"\"\"Initialize the simulation environment.\"\"\"\n        self.dimensions = dimensions\n        self.population_size = population_size\n        self.initial_infected_count = initial_infected_count\n        self.infection_probability = infection_probability\n        self.recovery_time = recovery_time\n        self.death_probability = death_probability\n        self.population = []\n        self.total_infected = initial_infected_count\n        self.total_recovered = 0\n        self.total_deceased = 0\n\n        # Initialize population\n        for _ in range(population_size - initial_infected_count):\n            location = [random.randint(0, dimensions[0]), random.randint(0, dimensions[1])]\n            self.population.append(Person(location))\n        \n        # Initialize infected individuals\n        for _ in range(initial_infected_count):\n            location = [random.randint(0, dimensions[0]), random.randint(0, dimensions[1])]\n            infected_person = Person(location)\n            infected_person.health_status = HealthStatus.INFECTED\n            self.population.append(infected_person)\n\n    def step(self):\n        \"\"\"Simulate one time step of the epidemic.\"\"\"\n        # Move all people\n        for person in self.population:\n            if person.health_status != HealthStatus.DECEASED:\n                person.move(self.dimensions)\n\n        # Interactions and health status updates\n        for person in self.population:\n            if person.health_status != HealthStatus.DECEASED:\n                # Interact with a random other person\n                other = random.choice(self.population)\n                if other is not person:\n                    person.interact(other)\n\n                # Update health status\n                prev_status = person.health_status\n                person.update_health_status(self.recovery_time, self.death_probability)\n                new_status = person.health_status\n\n                # Update counters\n                if prev_status != new_status:\n                    if new_status == HealthStatus.INFECTED:\n                        self.total_infected += 1\n                    elif new_status == HealthStatus.RECOVERED:\n                        self.total_recovered += 1\n                    elif new_status == HealthStatus.DECEASED:\n                        self.total_deceased += 1\n\n    def run(self, steps):\n        \"\"\"Run the simulation for a given number of steps.\"\"\"\n        for _ in range(steps):\n            self.step()\n\n    def plot(self):\n        \"\"\"Plot the simulation results.\"\"\"\n        health_status_counter = Counter([p.health_status for p in self.population])\n        plt.bar(HealthStatus.keys(), health_status_counter.values())\n        plt.show()\n\n# Main function\ndef main():\n    \"\"\"Run the epidemic simulation.\"\"\"\n    simulation = EpidemicSimulation(\n        dimensions=[100, 100],\n        population_size=1000,\n        initial_infected_count=1,\n        infection_probability=0.2,\n        recovery_time=14,\n        death_probability=0.02\n    )\n    simulation.run(steps=100)\n    simulation.plot()\n\nif __name__ == \"__main__\":\n    main()",
  "code_summary": "Generated 127 lines of code containing 3 classes and 9 functions.",
  "metadata": {
    "model_type": "agent_based",
    "entities": [
      "Person"
    ],
    "behaviors": [
      "move",
      "interact"
    ]
  }
}